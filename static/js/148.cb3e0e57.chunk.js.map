{"version":3,"file":"static/js/148.cb3e0e57.chunk.js","mappings":"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","sources":["components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const FormStyled = styled(Form)`\ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nwidth: 300px;\n`\n\nexport const Button = styled.button`\nwidth: 100px;\nborder-radius: 10px;\n`","// import * as Yup from 'yup';\nimport { Formik, Field } from 'formik';\nimport { Button, FormStyled } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContacts } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }) => {\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    dispatch(addContacts(newContact));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled>\n        <label htmlFor=\"Name\">Name</label>\n        <Field type=\"text\" name=\"name\" />\n        <label htmlFor=\"Number\">Number</label>\n        <Field type=\"tel\" name=\"number\" />\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 5px;\nwidth: 300px;\n`","import { Wrapper } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const filterChange = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Wrapper>\n      <label htmlFor=\"Filter\">Find contacts by name</label>\n      <input type=\"text\" name=\"Filter\" value={filter} onChange={filterChange} />\n    </Wrapper>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getContacts, deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {filteredContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button onClick={() => dispatch(deleteContact(contact.id))}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 6px;\n`","import { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  return (\n    <List>\n      <ContactListItem />\n    </List>\n  );\n};\n","import { ContactForm } from '../components/Contact/Contact';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getContacts } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <div>\n        <h1>Contacts</h1>\n        <Filter />\n        <ContactList />\n      </div>\n    </>\n  );\n};"],"names":["FormStyled","styled","Form","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","ContactForm","dispatch","useDispatch","_jsx","Formik","initialValues","name","number","onSubmit","_ref","newContact","id","nanoid","addContacts","children","_jsxs","htmlFor","Field","type","Wrapper","Filter","filter","useSelector","state","value","onChange","e","setFilter","currentTarget","ContactListItem","contacts","filteredContacts","contact","toLowerCase","includes","useEffect","getContacts","_Fragment","map","onClick","deleteContact","List","ContactList","Contacts"],"sourceRoot":""}